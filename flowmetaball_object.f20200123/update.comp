#version 430 core
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

// 粒子データ
struct Particle
{
  vec4 position;
  vec4 velocity;
  vec4 force;
};

// 粒子群データ
layout(std430, binding = 0) buffer Particles
{
  Particle particle[];
};

// 重力加速度
uniform vec4 gravity = vec4(0.0, -9.8, 0.0, 0.0);

// 地面の高さ
uniform float height = -1.5;

// 減衰率
uniform float attenuation = 0.7;

// タイムステップ
uniform float dt = 0.01666667;

// 粒子の影響範囲
const float R = 0.3f;

// ばねの自然長
const float L0 = 0.5f;

// 粒子の質量
const float m = 0.1f;

// 物体の位置(仮)
const float sphere[3] = {0.0f, 0.0f, 0.0f};
// 物体の半径
const float objR = 1.0f;

void main()
{
  // ワークグループ ID をのまま頂点データのインデックスに使う
  const uint i = gl_WorkGroupID.x;
  const uint j = gl_WorkGroupID.y;

  // 物体と粒子の距離
  float Dx = (sphere[0] - particle[i].position.x);
  float Dy = (sphere[1] - particle[i].position.y);
  float Dz = (sphere[2] - particle[i].position.z);
  float D = sqrt(Dx * Dx + Dy * Dy + Dz * Dz);

  // 粒子と物体の距離が物体の半径と粒子の半径の合計よりも
  // 小さい場合（接触したら）処理開始
  if(D < R + objR)
  {
    // 粒子ij間の距離を求める
    float rx = particle[i].position.x - particle[j].position.x;
    float ry = particle[i].position.y - particle[j].position.y;
    float rz = particle[i].position.z - particle[j].position.z;
    float pr = sqrt(rx * rx + ry * ry + rz * rz);

    // 3次エルミートスプライン関数
    float R3 = R * R * R;
    float R2 = R * R;
    float pr3 = pr * pr * pr;
    float pr2 = pr * pr;
    float w = 2*pr3/R3 - 3*pr2/R2 + 1;

    // フックの法則によるばねの力
    float springF = (pr - L0);

    // 粒子のポテンシャル
    float Poten = w * springF;

    //粒子ij間のベクトルを求める(粒子が伸びる方向)
    const float ex = (rx / pr);
    const float ey = (ry / pr);
    const float ez = (rz / pr);

    // 粒子iの影響範囲にあるjに力を累積する
    if(pr < R)
    {
      // 粒子iに累積するポテンシャル
      particle[i].force.x += Poten * ex;
      particle[i].force.y += Poten * ey;
      particle[i].force.z += Poten * ey;

      // 粒子iの加速度を求める
      float ax = particle[i].force.x / m;
      float ay = particle[i].force.y / m;
      float az = particle[i].force.z / m;

      // dt秒後の速度
      float vx = particle[i].velocity.x + ax * dt;
      float vy = particle[i].velocity.y + ay * dt;
      float vz = particle[i].velocity.z + az * dt;

      particle[i].velocity.x = vx;
      particle[i].velocity.y = vy;
      particle[i].velocity.z = vz;

      // dt秒後の位置(修正オイラー法)
      float px = particle[i].position.x + 0.5f * ((vx + particle[i].velocity.x) * dt);
      float py = particle[i].position.y + 0.5f * ((vy + particle[i].velocity.y) * dt);
      float pz = particle[i].position.z + 0.5f * ((vz + particle[i].velocity.z) * dt);

      particle[i].position.x = px;
      particle[i].position.y = py;
      particle[i].position.z = pz;

      }

  }
  
}
